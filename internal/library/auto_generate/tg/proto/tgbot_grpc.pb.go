// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/tgbot.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TgBotService_PrintLog_FullMethodName = "/sow.tgbot.TgBotService/PrintLog"
)

// TgBotServiceClient is the client API for TgBotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TgBotServiceClient interface {
	PrintLog(ctx context.Context, in *PrintLogRequest, opts ...grpc.CallOption) (*Null, error)
}

type tgBotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTgBotServiceClient(cc grpc.ClientConnInterface) TgBotServiceClient {
	return &tgBotServiceClient{cc}
}

func (c *tgBotServiceClient) PrintLog(ctx context.Context, in *PrintLogRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, TgBotService_PrintLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TgBotServiceServer is the server API for TgBotService service.
// All implementations must embed UnimplementedTgBotServiceServer
// for forward compatibility
type TgBotServiceServer interface {
	PrintLog(context.Context, *PrintLogRequest) (*Null, error)
	//mustEmbedUnimplementedTgBotServiceServer()
}

// UnimplementedTgBotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTgBotServiceServer struct {
}

func (UnimplementedTgBotServiceServer) PrintLog(context.Context, *PrintLogRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintLog not implemented")
}
func (UnimplementedTgBotServiceServer) mustEmbedUnimplementedTgBotServiceServer() {}

// UnsafeTgBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TgBotServiceServer will
// result in compilation errors.
type UnsafeTgBotServiceServer interface {
	mustEmbedUnimplementedTgBotServiceServer()
}

func RegisterTgBotServiceServer(s grpc.ServiceRegistrar, srv TgBotServiceServer) {
	s.RegisterService(&TgBotService_ServiceDesc, srv)
}

func _TgBotService_PrintLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgBotServiceServer).PrintLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgBotService_PrintLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgBotServiceServer).PrintLog(ctx, req.(*PrintLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TgBotService_ServiceDesc is the grpc.ServiceDesc for TgBotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TgBotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sow.tgbot.TgBotService",
	HandlerType: (*TgBotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrintLog",
			Handler:    _TgBotService_PrintLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tgbot.proto",
}
